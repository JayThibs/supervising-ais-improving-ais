import numpy as np
from .utils import query_model, get_joint_embedding, compile_cluster_table
from sklearn.cluster import KMeans


class ModelEvaluation:
    def __init__(self, text_subset: str, llm: str, prompt: str):
        self.text_subsetset = text_subset
        self.llm = llm
        self.prompt = prompt

    def generate_responses(self) -> list:
        """Generate responses from a model on a subset of texts using a prompt."""
        generation_results = query_model(self.texts_subset, self.llm, self.prompt)
        return generation_results

    def embed_responses(
        generation_results: list, llms: list, model_name: str = "text-embedding-ada-002"
    ) -> np.array:
        """Embed the responses generated by a model."""
        joint_embeddings_all_llms = []

        for i in range(len(llms)):
            inputs = generation_results[i][0]
            responses = generation_results[i][1]
            joint_embeddings = get_joint_embedding(
                inputs, responses, model_name, combine_statements=True
            )
            for input, response, embedding in zip(inputs, responses, joint_embeddings):
                joint_embeddings_all_llms.append([i, input, response, embedding])

        combined_embeddings = np.array([e[3] for e in joint_embeddings_all_llms])
        return combined_embeddings

    def perform_clustering(
        combined_embeddings: np.array, n_clusters: int = 200
    ) -> KMeans:
        """Perform clustering on combined embeddings."""
        clustering = KMeans(n_clusters=n_clusters, random_state=42).fit(
            combined_embeddings
        )
        return clustering

    def analyze_clusters(joint_embeddings_all_llms: list, clustering: KMeans) -> list:
        """Analyze the clusters."""
        rows = compile_cluster_table(clustering, joint_embeddings_all_llms)
        return rows

    def run_evaluation(self, data):
        pass

from .utils import *


def generate_responses(texts_subset, llm, prompt):
    """
    Generate responses from a model on a subset of texts using a prompt.
    """
    generation_results = query_model(texts_subset, llm, prompt)
    return generation_results


def embed_responses(generation_results):
    """
    Embed the responses generated by a model.
    """
    joint_embeddings_all_llms = []

    for i in range(len(llms)):
        inputs = generation_results[i][0]
        responses = generation_results[i][1]
        joint_embeddings = get_joint_embedding(
            inputs, responses, model="text-embedding-ada-002", combine_statements=True
        )
        for input, response, embedding in zip(inputs, responses, joint_embeddings):
            joint_embeddings_all_llms.append([i, input, response, embedding])

    combined_embeddings = np.array([e[3] for e in joint_embeddings_all_llms])
    return combined_embeddings


def perform_clustering(combined_embeddings):
    """
    Perform clustering on combined embeddings.
    """
    clustering = KMeans(n_clusters=200, random_state=42).fit(combined_embeddings)
    return clustering


def analyze_clusters(joint_embeddings_all_llms, clustering):
    """
    Analyze the clusters.
    """
    rows = compile_cluster_table(clustering, joint_embeddings_all_llms)
    return rows
